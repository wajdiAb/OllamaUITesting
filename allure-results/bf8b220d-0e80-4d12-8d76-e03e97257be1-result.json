{"name": "test_select_model_and_send_prompt", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message: \nStacktrace:\n#0 0x5678676242ca <unknown>\n#1 0x5678670cb550 <unknown>\n#2 0x56786711d0f0 <unknown>\n#3 0x56786711d2e1 <unknown>\n#4 0x56786716b5e4 <unknown>\n#5 0x567867142bed <unknown>\n#6 0x5678671689e6 <unknown>\n#7 0x567867142993 <unknown>\n#8 0x56786710ed6b <unknown>\n#9 0x567867110141 <unknown>\n#10 0x5678675e92ab <unknown>\n#11 0x5678675ed0b9 <unknown>\n#12 0x5678675d0139 <unknown>\n#13 0x5678675edc68 <unknown>\n#14 0x5678675b460f <unknown>\n#15 0x5678676121f8 <unknown>\n#16 0x5678676123d6 <unknown>\n#17 0x5678676235e6 <unknown>\n#18 0x76be65e9caa4 <unknown>\n#19 0x76be65f29c3c <unknown>", "trace": "self = <test_example.ChatFlowTest testMethod=test_select_model_and_send_prompt>\n\n    def test_select_model_and_send_prompt(self):\n        chat = ChatPage(self.driver, self.base_url).open()\n    \n        # Select model\n        chat.select_model(\"gemma3:1b\")\n        self.assertIn(\"gemma3:1b\", chat.selected_model_text())\n    \n        # Send a message\n        chat.send_message(\"write hello world!\")\n>       chat.wait_for_any_message()\n\ntests/test_example.py:34: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\npages/chat_page.py:33: in wait_for_any_message\n    self.wait(EC.presence_of_element_located(self.ANY_MESSAGE), timeout=timeout)\npages/base_page.py:22: in wait\n    return WebDriverWait(self.driver, timeout or self.timeout).until(condition)\n           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"cc7fe4ab92418b2f2cccaa749b2698cc\")>\nmethod = <function presence_of_element_located.<locals>._predicate at 0x7955da6f1760>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Wait until the method returns a value that is not False.\n    \n        Calls the method provided with the driver as an argument until the\n        return value does not evaluate to ``False``.\n    \n        Parameters:\n        -----------\n        method: callable(WebDriver)\n            - A callable object that takes a WebDriver instance as an argument.\n    \n        message: str\n            - Optional message for :exc:`TimeoutException`\n    \n        Return:\n        -------\n        object: T\n            - The result of the last call to `method`\n    \n        Raises:\n        -------\n        TimeoutException\n            - If 'method' does not return a truthy value within the WebDriverWait\n            object's timeout\n    \n        Example:\n        --------\n        >>> from selenium.webdriver.common.by import By\n        >>> from selenium.webdriver.support.ui import WebDriverWait\n        >>> from selenium.webdriver.support import expected_conditions as EC\n    \n        # Wait until an element is visible on the page\n        >>> wait = WebDriverWait(driver, 10)\n        >>> element = wait.until(EC.visibility_of_element_located((By.ID, \"exampleId\")))\n        >>> print(element.text)\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            if time.monotonic() > end_time:\n                break\n            time.sleep(self._poll)\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message: \nE       Stacktrace:\nE       #0 0x5678676242ca <unknown>\nE       #1 0x5678670cb550 <unknown>\nE       #2 0x56786711d0f0 <unknown>\nE       #3 0x56786711d2e1 <unknown>\nE       #4 0x56786716b5e4 <unknown>\nE       #5 0x567867142bed <unknown>\nE       #6 0x5678671689e6 <unknown>\nE       #7 0x567867142993 <unknown>\nE       #8 0x56786710ed6b <unknown>\nE       #9 0x567867110141 <unknown>\nE       #10 0x5678675e92ab <unknown>\nE       #11 0x5678675ed0b9 <unknown>\nE       #12 0x5678675d0139 <unknown>\nE       #13 0x5678675edc68 <unknown>\nE       #14 0x5678675b460f <unknown>\nE       #15 0x5678676121f8 <unknown>\nE       #16 0x5678676123d6 <unknown>\nE       #17 0x5678676235e6 <unknown>\nE       #18 0x76be65e9caa4 <unknown>\nE       #19 0x76be65f29c3c <unknown>\n\n.venv/lib/python3.12/site-packages/selenium/webdriver/support/wait.py:138: TimeoutException"}, "start": 1755677718143, "stop": 1755677789431, "uuid": "6f5c3cab-444c-4534-aa99-1e4ac4ce7759", "historyId": "aabeaa2533b67fd8e31c7ad25178ee57", "testCaseId": "aabeaa2533b67fd8e31c7ad25178ee57", "fullName": "tests.test_example.ChatFlowTest#test_select_model_and_send_prompt", "labels": [{"name": "parentSuite", "value": "tests"}, {"name": "suite", "value": "test_example"}, {"name": "subSuite", "value": "ChatFlowTest"}, {"name": "host", "value": "LAPTOP-J12RM8I3"}, {"name": "thread", "value": "159337-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "tests.test_example"}], "titlePath": ["tests", "test_example.py", "ChatFlowTest"]}